AWSTemplateFormatVersion: '2010-09-09'
Metadata: 
  License: Apache-2.0
Parameters:
  FullWebsiteDomainName:
    Type: String
    Description: e.g. pgaimpact.org or impact.sandboxpga.org. DO NOT add www.
  CreateWWW: 
    Type: String
    Description: e.g. www.pgaimpact.org. Do not use if main website uses a subdomain. Wildcard SSL cert won't be valid for www.impact.sandboxpga.org
    AllowedValues: [true, false]
    Default: true
  Route53HostedZoneId:
    Type: "AWS::Route53::HostedZone::Id"
    Description: Hosted Zone Id of the domain
  AcmCertificateArn:
    Type: String
    Description: The ARN of an ACM SSL certificate. e.g arn:aws:acm:us-east-1:XXXXX:certificate/aaaa-bbbb-ccc-ddd-eeee
    AllowedPattern: "arn:aws:acm:.*"
  PgaSupplierInclusionorgCertificateArn:
    Type: String
    Description: The ARN of an ACM SSL certificate. e.g arn:aws:acm:us-east-1:XXXXX:certificate/aaaa-bbbb-ccc-ddd-eeee
    AllowedPattern: "arn:aws:acm:.*"
  CloudfrontDefaultTTL:
    Type: Number
    Description: The default time in seconds that objects stay in CloudFront cache.
  LambdaVer:
    Type: String
    Default: "2"
      
Conditions: 
  CreateWWWRedirect: !Equals [ !Ref CreateWWW, true ]

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Domain"
        Parameters: 
          - FullWebsiteDomainName
          - CreateWWW
          - Route53HostedZoneId
    ParameterLabels:
      FullWebsiteDomainName: 
        default: "Full Domain Name"
      CreateWWW: 
        default: "Auto-create www Redirect"
      Route53HostedZoneId: 
        default: "Hosted Zone ID"
      AcmCertificateArn: 
        default: "ACM SSL Certificate ARN"
      CloudfrontDefaultTTL: 
        default: "Default Cache TTL"
          
Mappings:
  RegionMap:
    us-east-1:
      Suffix: .s3-website-us-east-1.amazonaws.com
    us-west-1:
      Suffix: .s3-website-us-west-1.amazonaws.com
    us-west-2:
      Suffix: .s3-website-us-west-2.amazonaws.com
    eu-west-1:
      Suffix: .s3-website-eu-west-1.amazonaws.com
    ap-northeast-1:
      Suffix: .s3-website-ap-northeast-1.amazonaws.com
    ap-northeast-2:
      Suffix: .s3-website-ap-northeast-2.amazonaws.com
    ap-southeast-1:
      Suffix: .s3-website-ap-southeast-1.amazonaws.com
    ap-southeast-2:
      Suffix: .s3-website-ap-southeast-2.amazonaws.com
    ap-south-1:
      Suffix: .s3-website-ap-south-1.amazonaws.com
    us-east-2:
      Suffix: .s3-website-us-east-2.amazonaws.com
    sa-east-1:
      Suffix: .s3-website-sa-east-1.amazonaws.com
    cn-north-1:
      Suffix: .s3-website.cn-north-1.amazonaws.com.cn
    eu-central-1:
      Suffix: .s3-website.eu-central-1.amazonaws.com

Resources:
  S3BucketForWebsite:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref FullWebsiteDomainName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
  
  S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref 'S3BucketForWebsite'
        PolicyDocument:
          Statement:
          - Sid: PublicRead
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'S3BucketForWebsite', '/*']]
  
  S3BucketForRedirect:
    Type: AWS::S3::Bucket
    Condition: CreateWWWRedirect
    Properties:
      BucketName: !Join ['.', ['www', !Ref FullWebsiteDomainName]]
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Ref FullWebsiteDomainName # Redirect to non-www version
          Protocol: https
  CfDistroForPgaSupplierInclusion:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: 'true'
        Comment: static website
        Aliases:
          - 'pgasupplierinclusion.org'
          - 'www.pgasupplierinclusion.org'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: !Ref CloudfrontDefaultTTL
          Compress: 'true'
          ForwardedValues:
            QueryString: 'true'
          LambdaFunctionAssociations:
            - EventType: viewer-request
              LambdaFunctionARN: !Sub '${LambdaAtEdge.Arn}:${LambdaAtEdgeCustomResource.Version}'
        HttpVersion: http2
        IPV6Enabled: 'true'
        ViewerCertificate:
          AcmCertificateArn: !Ref PgaSupplierInclusionorgCertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1_2016
        Origins:
          - Id: S3Origin
            DomainName: !Join ['', [!Ref 'S3BucketForWebsite', !FindInMap [RegionMap, !Ref 'AWS::Region', Suffix]]]
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
  
  CfDistroForWebsite:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: 'true'
        Comment: static website
        Aliases:
          - !Ref FullWebsiteDomainName
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: !Ref CloudfrontDefaultTTL
          Compress: 'true'
          ForwardedValues:
            QueryString: 'true'
        HttpVersion: http2
        IPV6Enabled: 'true'
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1_2016
        Origins:
          - Id: S3Origin
            DomainName: !Join ['', [!Ref 'S3BucketForWebsite', !FindInMap [RegionMap, !Ref 'AWS::Region', Suffix]]]
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
          
  CfDistroForRedirect:
    Type: AWS::CloudFront::Distribution
    Condition: CreateWWWRedirect
    Properties:
      DistributionConfig:
        Enabled: 'true'
        Comment: www-redirect
        Aliases:
          - !Join ['.', ['www', !Ref FullWebsiteDomainName]]
        DefaultCacheBehavior:
          TargetOriginId: S3RedirectOrigin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: 'true'
        HttpVersion: http2
        IPV6Enabled: 'true'
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1_2016
        Origins:
          - Id: S3RedirectOrigin
            DomainName: !Join ['', [!Ref 'S3BucketForRedirect', !FindInMap [RegionMap, !Ref 'AWS::Region', Suffix]]]
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only  
              
  DNSNameForWebsite:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref Route53HostedZoneId
      RecordSets:
      - 
        Name: !Ref FullWebsiteDomainName
        Type: A # IPv4 Record
        AliasTarget:
          HostedZoneId: 'Z2FDTNDATAQYW2' # Value for ALL Cloudfront targets
          DNSName: !GetAtt CfDistroForWebsite.DomainName
      - 
        Name: !Ref FullWebsiteDomainName
        Type: AAAA # IPv6 Record
        AliasTarget:
          HostedZoneId: 'Z2FDTNDATAQYW2'
          DNSName: !GetAtt CfDistroForWebsite.DomainName

  DNSNameForRedirect:
    Type: AWS::Route53::RecordSetGroup
    Condition: CreateWWWRedirect
    Properties:
      HostedZoneId: !Ref Route53HostedZoneId
      RecordSets:
      - 
        Name: !Join ['.', ['www', !Ref FullWebsiteDomainName]]
        Type: A # IPv4 Record
        AliasTarget:
          HostedZoneId: 'Z2FDTNDATAQYW2'
          DNSName: !GetAtt CfDistroForRedirect.DomainName
      - 
        Name: !Join ['.', ['www', !Ref FullWebsiteDomainName]]
        Type: AAAA # IPv6 Record
        AliasTarget:
          HostedZoneId: 'Z2FDTNDATAQYW2'
          DNSName: !GetAtt CfDistroForRedirect.DomainName

  LambdaAtEdge:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Redirects request for Vanity domain to a URL that cannot be CNAMEd."
      Handler: "index.handler"
      Role: !GetAtt LambdaAtEdgeRole.Arn
      Code:
        ZipFile: |
              exports.handler = (event, context, callback) => {
                const request = event.Records[0].cf.request;
                const httpVersion = request.httpVersion;
                const clientIp    = request.clientIp;
                const method      = request.method;
                const uri         = request.uri;
                const headers     = request.headers;
                const host        = headers['host'][0].value;
                const match1      = '${LocalFindInMapVar1}';
                const match2      = '${LocalFindInMapVar2}';
                const match3      = '${LocalFindInMapVar3}';
                const match4      = '${LocalFindInMapVar4}';
                let destinationUrl;
                destinationUrl = 'https://pgaimpact.org/fostering-supplier-inclusion.html';
                const response = {
                  status: '302',
                statusDescription: 'Found',
                  headers: {
                    location: [{
                      key: 'Location',
                      value: destinationUrl,
                      }],
                    },
                  };
                callback(null, response);
                };
      Runtime: "nodejs6.10"
      Timeout: "5"

  LambdaAtEdgeRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns: ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ["lambda.amazonaws.com", "edgelambda.amazonaws.com"]
            Action: "sts:AssumeRole"

  VersionPublisher:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Automatically publishes a new version of the lambda function on each CloudFormation update"
      Handler: "index.handler"
      Role: !GetAtt VersionPublisherRole.Arn
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const AWS = require('aws-sdk');
          const lambda = new AWS.Lambda();
          exports.handler = (event, context) => {
            if (event.RequestType == 'Delete') {
              return response.send(event, context, response.SUCCESS);
            }
            const params = {
              FunctionName: event.ResourceProperties.FunctionName,
              Description: event.ResourceProperties.Description,
            }
            lambda.publishVersion(params).promise()
              .then((data) => {
            return response.send(event, context, response.SUCCESS, { Version: data.Version });
            }).catch((err)=> {
            return response.send(event, context, response.FAILED, err);
            });
          };
      Runtime: "nodejs6.10"
      Timeout: "60"

  VersionPublisherRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns: ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]
      Policies:
        - PolicyName: "VersionPublisherPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "lambda:PublishVersion"
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ["lambda.amazonaws.com"]
            Action: "sts:AssumeRole"

  LambdaAtEdgeCustomResource:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt VersionPublisher.Arn
      FunctionName: !Ref LambdaAtEdge
      Description: !Sub "Redirect for fostering-diversity-and-inclusion.html - ${LambdaVer}"
Outputs:
  WebsiteURL:
    Value: !Join ['', ['https://', !Ref FullWebsiteDomainName]]
    Description: The URL of the newly created website
  BucketName:
    Value: !Ref 'S3BucketForWebsite'
    Description: Name of S3 bucket to hold website content
